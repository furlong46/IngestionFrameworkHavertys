{
	"name": "df_ADLS_to_Fact_SalesTeamBridge",
	"properties": {
		"folder": {
			"name": "Fact_DataFlows/Replaced by DBX"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ADLSG2parquet_staging_sales_tbdwbld",
						"type": "DatasetReference"
					},
					"name": "Sourcetbdwbld"
				},
				{
					"dataset": {
						"referenceName": "ds_ADLSG2parquet_staging_sales_tbdwwrt",
						"type": "DatasetReference"
					},
					"name": "Sourcetbdwwrt"
				},
				{
					"dataset": {
						"referenceName": "ds_AzureSqlTable_HavertysDW_Dim_Team",
						"type": "DatasetReference"
					},
					"name": "SourceDimTeam"
				},
				{
					"dataset": {
						"referenceName": "ds_ADLSG2_staging_masterdata_employee_tbdwemp",
						"type": "DatasetReference"
					},
					"name": "Sourcetbdwemp"
				},
				{
					"dataset": {
						"referenceName": "ds_AzureSqlTable_Dim_Employee",
						"type": "DatasetReference"
					},
					"name": "SourceDimEmployee"
				},
				{
					"dataset": {
						"referenceName": "ds_AzureSQLTable_HavertysDW_Fact_SalesTeamBridge",
						"type": "DatasetReference"
					},
					"name": "SourceFactSalesTeamBridge"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_AzureSQLTable_HavertysDW_Fact_SalesTeamBridge",
						"type": "DatasetReference"
					},
					"name": "SinkFactSalesTeamBridge"
				}
			],
			"transformations": [
				{
					"name": "DistinctSalesTeamMembers"
				},
				{
					"name": "DeriveOrdered1"
				},
				{
					"name": "SelectPairDownColumns1"
				},
				{
					"name": "SelecttbdwwrtPairColumns"
				},
				{
					"name": "UnionWithWritten2"
				},
				{
					"name": "DeriveLookUpColumns"
				},
				{
					"name": "LookupSalesEmpNum"
				},
				{
					"name": "SelectSalesEmpNum"
				},
				{
					"name": "LookupCoSalesEmpNum"
				},
				{
					"name": "SelectCoSalesEmpNum"
				},
				{
					"name": "DeriveCoalesceColumns"
				},
				{
					"name": "SelectEmployeeLookupColumns"
				},
				{
					"name": "DeriveEmployeeLookupColumns"
				},
				{
					"name": "DeriveIsNull2"
				},
				{
					"name": "SelectTeamMemberName2"
				},
				{
					"name": "DerivedConvertToInt"
				},
				{
					"name": "LookupDimTeam"
				},
				{
					"name": "SelectDimTeam"
				},
				{
					"name": "DeriveReplaceNulls"
				},
				{
					"name": "LookDimEmployee2"
				},
				{
					"name": "SourceDimEmployeeConvert"
				},
				{
					"name": "SourceDimEmployeeSelect"
				},
				{
					"name": "LookDimEmployee1"
				},
				{
					"name": "SelectEmployeeColumns2"
				},
				{
					"name": "SelectEmployeeColumns1"
				},
				{
					"name": "DeriveMetadata2"
				},
				{
					"name": "DeriveMetadata1"
				},
				{
					"name": "UnionTeamMember1AndTeamMember2"
				},
				{
					"name": "LookupExistingFactSalesTeamBridge"
				},
				{
					"name": "SelectLookupDeslect"
				},
				{
					"name": "FilterNonInsertUpdate"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "MetadataUpdate"
				},
				{
					"name": "WindowRemoveDuplicates"
				},
				{
					"name": "FilterRemoveDuplicates"
				}
			],
			"script": "\nparameters{\n\tMasterProcessNumber as string ('1')\n}\nsource(output(\n\t\tPROCESS_NUMBER as decimal(38,18),\n\t\tDIVISION as decimal(38,18),\n\t\tMARKET as decimal(38,18),\n\t\tBRANCH as decimal(38,18),\n\t\tSALENUM as decimal(38,18),\n\t\tLINE as decimal(38,18),\n\t\tTYPE as string,\n\t\tTRANTYPE as string,\n\t\tTRANSEQUENCE as decimal(38,18),\n\t\tORGSALENUM as decimal(38,18),\n\t\tBILLEDDATE as timestamp,\n\t\tWRITTENDATE as timestamp,\n\t\tITEM as string,\n\t\tGROUPSKU as string,\n\t\tQUANTITY as decimal(38,18),\n\t\tGROSSSLS as decimal(38,18),\n\t\tGRPSKUDSCT as decimal(38,18),\n\t\tRTLREDUCTION as decimal(38,18),\n\t\tOVRDISCOUNT as decimal(38,18),\n\t\tPROMODISCOUNT as decimal(38,18),\n\t\tUNCLASSDSCT as decimal(38,18),\n\t\tUNDLVALLOW as decimal(38,18),\n\t\tRETAIL as decimal(38,18),\n\t\tTAXAMT1 as decimal(38,18),\n\t\tTAXAMT2 as decimal(38,18),\n\t\tCIDNUM as decimal(38,18),\n\t\tCIDPRFSEQ as decimal(38,18),\n\t\tSALEASC as decimal(38,18),\n\t\tSALEEMPID as decimal(38,18),\n\t\tCOSALEASC as decimal(38,18),\n\t\tCOSALEEMPID as decimal(38,18),\n\t\tDESIGNER as decimal(38,18),\n\t\tCODESIGNER as decimal(38,18),\n\t\tOVRRSNID as decimal(38,18),\n\t\tOVRRSNDESC as string,\n\t\tOVRRSNCMT as string,\n\t\tOVRUSRFNAM as string,\n\t\tOVRUSRLNAM as string,\n\t\tSALEPROMO as string,\n\t\tCREDITPROMO as string,\n\t\tDELIVERYDC as decimal(38,18),\n\t\tLANDEDCOST as decimal(38,18),\n\t\tCHARGETYPE as string,\n\t\tINTERNETSALE as string,\n\t\tEXCHANGETYPE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> Sourcetbdwbld\nsource(output(\n\t\tPROCESS_NUMBER as decimal(38,18),\n\t\tDIVISION as decimal(38,18),\n\t\tMARKET as decimal(38,18),\n\t\tBRANCH as decimal(38,18),\n\t\tSALENUM as decimal(38,18),\n\t\tLINE as decimal(38,18),\n\t\tTYPE as string,\n\t\tTRANTYPE as string,\n\t\tTRANSEQUENCE as decimal(38,18),\n\t\tORGSALENUM as decimal(38,18),\n\t\tWRITTENDATE as timestamp,\n\t\tWRITTENTIME as decimal(38,18),\n\t\tITEM as string,\n\t\tGROUPSKU as string,\n\t\tQUANTITY as decimal(38,18),\n\t\tGROSSSLS as decimal(38,18),\n\t\tGRPSKUDSCT as decimal(38,18),\n\t\tRTLREDUCTION as decimal(38,18),\n\t\tOVRDISCOUNT as decimal(38,18),\n\t\tPROMODISCOUNT as decimal(38,18),\n\t\tUNCLASSDSCT as decimal(38,18),\n\t\tRETAIL as decimal(38,18),\n\t\tTAXAMT1 as decimal(38,18),\n\t\tTAXAMT2 as decimal(38,18),\n\t\tCIDNUM as decimal(38,18),\n\t\tCIDPRFSEQ as decimal(38,18),\n\t\tSALEASC as decimal(38,18),\n\t\tSALEEMPID as decimal(38,18),\n\t\tCOSALEASC as decimal(38,18),\n\t\tCOSALEEMPID as decimal(38,18),\n\t\tDESIGNER as decimal(38,18),\n\t\tCODESIGNER as decimal(38,18),\n\t\tOVRRSNID as decimal(38,18),\n\t\tOVRRSNDESC as string,\n\t\tOVRRSNCMT as string,\n\t\tOVRUSRFNAM as string,\n\t\tOVRUSRLNAM as string,\n\t\tSALEPROMO as string,\n\t\tCREDITPROMO as string,\n\t\tDELIVERYDC as decimal(38,18),\n\t\tCHARGETYPE as string,\n\t\tINTERNETSALE as string,\n\t\tEXCHANGETYPE as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> Sourcetbdwwrt\nsource(output(\n\t\tTeam_sk as integer,\n\t\tTeamMember1_ID_nk as integer,\n\t\tTeamMember1_Name as string,\n\t\tTeamMember2_ID_nk as integer,\n\t\tTeamMember2_Name as string,\n\t\tTeamType_nk as string,\n\t\tHashKey as string,\n\t\tSourceSystem_fk as integer,\n\t\tETLBatchID_Insert as integer,\n\t\tETLBatchID_Update as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceDimTeam\nsource(output(\n\t\tEMPLOYEE_NUMBER_TYPE as string,\n\t\tEMPLOYEE_NUMBER as string,\n\t\tFIRST_NAME as string,\n\t\tLAST_NAME as string,\n\t\tDIVISION as decimal(38,18),\n\t\tCENTER as decimal(38,18),\n\t\tBRANCH as decimal(38,18),\n\t\tSALES_NUMBER as decimal(38,18),\n\t\tWMS_NUMBER as decimal(38,18),\n\t\tDRIVER_NUMBER as decimal(38,18),\n\t\tDESIGNER_NUMBER as decimal(38,18)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> Sourcetbdwemp\nsource(output(\n\t\tEmployee_sk as integer,\n\t\tEmployee_ID_nk as string,\n\t\tEmployeeType_Code as string,\n\t\tEmployeeType_Name as string,\n\t\tSales_ID as integer,\n\t\tWMS_ID as integer,\n\t\tDriver_ID as integer,\n\t\tDesigner_ID as integer,\n\t\tFirst_Name as string,\n\t\tLast_Name as string,\n\t\tFull_Name as string,\n\t\tDivision_ID as integer,\n\t\tMarket_ID as integer,\n\t\tBranch_ID as integer,\n\t\tHashKey as string,\n\t\tSourceSystem_fk as integer,\n\t\tETLBatchID_Insert as integer,\n\t\tETLBatchID_Update as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceDimEmployee\nsource(output(\n\t\tSales_Team_Bridge_sk as integer,\n\t\tCount as integer,\n\t\tSales_Team_fk as integer,\n\t\tSales_Associate_fk as integer,\n\t\tTeamMember1_ID_nk as integer,\n\t\tTeamMember2_ID_nk as integer,\n\t\tEmployee_ID_nk as integer,\n\t\tSourceSystem_fk as integer,\n\t\tETLBatchID_Insert as integer,\n\t\tETLBatchID_Update as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceFactSalesTeamBridge\nDeriveOrdered1 aggregate(groupBy(TeamMember1 = TeamMember1,\n\t\tTeamMember2 = TeamMember2,\n\t\tTeamType = TeamType),\n\tCount = sum(1)) ~> DistinctSalesTeamMembers\nDeriveCoalesceColumns derive(TeamMember1 = greatest(SalesEmpID_Coalesce,CoSalesEmpID_Coalesce),\n\t\tTeamMember2 = least(SalesEmpID_Coalesce,CoSalesEmpID_Coalesce),\n\t\tTeamType = 'Sales') ~> DeriveOrdered1\nSourcetbdwbld select(mapColumn(\n\t\tSALEASC,\n\t\tCOSALEASC,\n\t\tDESIGNER,\n\t\tCODESIGNER,\n\t\tDIVISION,\n\t\tMARKET,\n\t\tSALEEMPID,\n\t\tCOSALEEMPID\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectPairDownColumns1\nSourcetbdwwrt select(mapColumn(\n\t\tSALEASC,\n\t\tCOSALEASC,\n\t\tDESIGNER,\n\t\tCODESIGNER,\n\t\tDIVISION,\n\t\tMARKET,\n\t\tSALEEMPID,\n\t\tCOSALEEMPID\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelecttbdwwrtPairColumns\nSelectPairDownColumns1, SelecttbdwwrtPairColumns union(byName: true)~> UnionWithWritten2\nDeriveIsNull2 derive(SALEASC_LookUp = DIVISION * 1000000 + MARKET * 1000 + SALEASC,\n\t\tCOSALEASC_LookUp = DIVISION * 1000000 + MARKET * 1000 + COSALEASC) ~> DeriveLookUpColumns\nDeriveLookUpColumns, Sourcetbdwemp lookup(SALEASC_LookUp == SALES_NUMBER,\n\tbroadcast: 'none')~> LookupSalesEmpNum\nLookupSalesEmpNum select(mapColumn(\n\t\tSALEASC,\n\t\tCOSALEASC,\n\t\tDESIGNER,\n\t\tCODESIGNER,\n\t\tDIVISION = {UnionWithWritten2@DIVISION},\n\t\tMARKET,\n\t\tSALEEMPID,\n\t\tCOSALEEMPID,\n\t\tSALEASC_LookUp,\n\t\tCOSALEASC_LookUp,\n\t\tSalesEmpID = EMPLOYEE_NUMBER\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectSalesEmpNum\nSelectSalesEmpNum, Sourcetbdwemp lookup(COSALEASC_LookUp == SALES_NUMBER,\n\tbroadcast: 'none')~> LookupCoSalesEmpNum\nLookupCoSalesEmpNum select(mapColumn(\n\t\tSALEASC,\n\t\tCOSALEASC,\n\t\tDESIGNER,\n\t\tCODESIGNER,\n\t\tDIVISION = {SelectSalesEmpNum@DIVISION},\n\t\tMARKET,\n\t\tSALEEMPID,\n\t\tCOSALEEMPID,\n\t\tSALEASC_LookUp,\n\t\tCOSALEASC_LookUp,\n\t\tSalesEmpID,\n\t\tCoSalesEmpID = EMPLOYEE_NUMBER\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectCoSalesEmpNum\nSelectCoSalesEmpNum derive(SalesEmpID_Coalesce = coalesce(toInteger(SALEEMPID), toInteger(trim(SalesEmpID)), 0),\n\t\tCoSalesEmpID_Coalesce = coalesce(toInteger(COSALEEMPID), toInteger(trim(CoSalesEmpID)), 0)) ~> DeriveCoalesceColumns\nSourcetbdwemp select(mapColumn(\n\t\tEMPLOYEE_NUMBER,\n\t\tFIRST_NAME,\n\t\tLAST_NAME = FIRST_NAME,\n\t\tDESIGNER_NUMBER\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectEmployeeLookupColumns\nSelectEmployeeLookupColumns derive(Employee_Number_Lookup = toInteger(trim(EMPLOYEE_NUMBER)),\n\t\tFull_Name = concat(trim(FIRST_NAME), ' ', trim(LAST_NAME))) ~> DeriveEmployeeLookupColumns\nUnionWithWritten2 derive(SALEASC = iifNull(SALEASC, 0),\n\t\tCOSALEASC = iifNull(COSALEASC, 0)) ~> DeriveIsNull2\nDistinctSalesTeamMembers select(mapColumn(\n\t\tTeamMember1_ID_nk = TeamMember1,\n\t\tTeamMember2_ID_nk = TeamMember2,\n\t\tTeamType_nk = TeamType,\n\t\tCount\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectTeamMemberName2\nSelectTeamMemberName2 derive(TeamMember1_ID_nk = iifNull(toInteger(TeamMember1_ID_nk), 0),\n\t\tTeamMember2_ID_nk = iifNull(toInteger(TeamMember2_ID_nk), 0)) ~> DerivedConvertToInt\nDerivedConvertToInt, SourceDimTeam lookup(DerivedConvertToInt@TeamMember1_ID_nk == SourceDimTeam@TeamMember1_ID_nk\n\t&& DerivedConvertToInt@TeamMember2_ID_nk == SourceDimTeam@TeamMember2_ID_nk\n\t&& SelectTeamMemberName2@TeamType_nk == SourceDimTeam@TeamType_nk,\n\tbroadcast: 'none')~> LookupDimTeam\nLookupDimTeam select(mapColumn(\n\t\tTeamMember1_ID_nk = {DerivedConvertToInt@TeamMember1_ID_nk},\n\t\tTeamMember2_ID_nk = {DerivedConvertToInt@TeamMember2_ID_nk},\n\t\tTeamType_nk = {SelectTeamMemberName2@TeamType_nk},\n\t\tCount,\n\t\tTeam_sk\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectDimTeam\nSelectDimTeam derive(Team_fk = iifNull(Team_sk, 0)) ~> DeriveReplaceNulls\nDeriveReplaceNulls, SourceDimEmployeeSelect lookup(TeamMember2_ID_nk == Employee_ID_nk,\n\tbroadcast: 'none')~> LookDimEmployee2\nSourceDimEmployee derive(Employee_ID_nk = toInteger(Employee_ID_nk)) ~> SourceDimEmployeeConvert\nSourceDimEmployeeConvert select(mapColumn(\n\t\tEmployee_sk,\n\t\tEmployee_ID_nk\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SourceDimEmployeeSelect\nDeriveReplaceNulls, SourceDimEmployeeSelect lookup(TeamMember1_ID_nk == Employee_ID_nk,\n\tbroadcast: 'none')~> LookDimEmployee1\nLookDimEmployee2 select(mapColumn(\n\t\tTeamMember1_ID_nk,\n\t\tTeamMember2_ID_nk,\n\t\tTeamType_nk,\n\t\tTeam_fk,\n\t\tEmployee_fk = Employee_sk,\n\t\tEmployee_ID_nk = TeamMember2_ID_nk\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectEmployeeColumns2\nLookDimEmployee1 select(mapColumn(\n\t\tTeamMember1_ID_nk,\n\t\tTeamMember2_ID_nk,\n\t\tTeamType_nk,\n\t\tTeam_fk,\n\t\tEmployee_fk = Employee_sk,\n\t\tEmployee_ID_nk = TeamMember1_ID_nk\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectEmployeeColumns1\nSelectEmployeeColumns2 derive(ETLBatchID_Insert = toInteger($MasterProcessNumber),\n\t\tETLBatchID_Update = toInteger($MasterProcessNumber),\n\t\tSourceSystem_fk = 0,\n\t\tCount = 1,\n\t\tEmployee_fk = iifNull(Employee_fk, 0)) ~> DeriveMetadata2\nSelectEmployeeColumns1 derive(ETLBatchID_Insert = toInteger($MasterProcessNumber),\n\t\tETLBatchID_Update = toInteger($MasterProcessNumber),\n\t\tSourceSystem_fk = 0,\n\t\tCount = 1,\n\t\tEmployee_fk = iifNull(Employee_fk, 0)) ~> DeriveMetadata1\nDeriveMetadata1, DeriveMetadata2 union(byName: true)~> UnionTeamMember1AndTeamMember2\nUnionTeamMember1AndTeamMember2, SourceFactSalesTeamBridge lookup(UnionTeamMember1AndTeamMember2@TeamMember1_ID_nk == SourceFactSalesTeamBridge@TeamMember1_ID_nk\n\t&& UnionTeamMember1AndTeamMember2@TeamMember2_ID_nk == SourceFactSalesTeamBridge@TeamMember2_ID_nk\n\t&& UnionTeamMember1AndTeamMember2@Employee_ID_nk == SourceFactSalesTeamBridge@Employee_ID_nk,\n\tbroadcast: 'none')~> LookupExistingFactSalesTeamBridge\nLookupExistingFactSalesTeamBridge select(mapColumn(\n\t\tTeamMember1_ID_nk = {UnionTeamMember1AndTeamMember2@TeamMember1_ID_nk},\n\t\tTeamMember2_ID_nk = {UnionTeamMember1AndTeamMember2@TeamMember2_ID_nk},\n\t\tTeamType_nk,\n\t\tTeam_fk,\n\t\tEmployee_fk,\n\t\tEmployee_ID_nk = {UnionTeamMember1AndTeamMember2@Employee_ID_nk},\n\t\tETLBatchID_Insert = {UnionTeamMember1AndTeamMember2@ETLBatchID_Insert},\n\t\tETLBatchID_Update = {UnionTeamMember1AndTeamMember2@ETLBatchID_Update},\n\t\tSourceSystem_fk = {UnionTeamMember1AndTeamMember2@SourceSystem_fk},\n\t\tCount = {UnionTeamMember1AndTeamMember2@Count},\n\t\tSales_Team_Bridge_sk_Dest = Sales_Team_Bridge_sk,\n\t\tSales_Team_fk_Dest = Sales_Team_fk,\n\t\tSales_Associate_fk_Dest = Sales_Associate_fk,\n\t\tETLBatchID_Insert_Dest = {SourceFactSalesTeamBridge@ETLBatchID_Insert}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectLookupDeslect\nFilterRemoveDuplicates filter(isNull(Sales_Team_Bridge_sk_Dest) || (!isNull(Sales_Team_Bridge_sk_Dest) && (Team_fk!=Sales_Team_fk_Dest || Employee_fk!=Sales_Associate_fk_Dest))) ~> FilterNonInsertUpdate\nFilterNonInsertUpdate alterRow(insertIf(isNull(Sales_Team_Bridge_sk_Dest)),\n\tupdateIf((!isNull(Sales_Team_Bridge_sk_Dest)&&(Team_fk!=Sales_Team_fk_Dest||Employee_fk!=Sales_Associate_fk_Dest)))) ~> AlterRow1\nSelectLookupDeslect derive(ETLBatchID_Insert = iifNull(ETLBatchID_Insert_Dest, ETLBatchID_Insert)) ~> MetadataUpdate\nMetadataUpdate window(over(TeamType_nk = TeamType_nk,\n\t\tTeamMember1_ID_nk = TeamMember1_ID_nk,\n\t\tTeamMember2_ID_nk = TeamMember2_ID_nk,\n\t\tEmployee_ID_nk = Employee_ID_nk),\n\tasc(TeamMember1_ID_nk, true),\n\tasc(TeamMember2_ID_nk, true),\n\tasc(TeamType_nk, true),\n\tasc(Employee_ID_nk, true),\n\tDupeCount = rowNumber()) ~> WindowRemoveDuplicates\nWindowRemoveDuplicates filter(DupeCount==1) ~> FilterRemoveDuplicates\nAlterRow1 sink(input(\n\t\tSales_Team_Bridge_sk as integer,\n\t\tCount as integer,\n\t\tSales_Team_fk as integer,\n\t\tSales_Associate_fk as integer,\n\t\tTeamMember1_ID_nk as integer,\n\t\tTeamMember2_ID_nk as integer,\n\t\tEmployee_ID_nk as integer,\n\t\tSourceSystem_fk as integer,\n\t\tETLBatchID_Insert as integer,\n\t\tETLBatchID_Update as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TeamMember1_ID_nk','TeamMember2_ID_nk','Employee_ID_nk'],\n\tformat: 'table',\n\tmapColumn(\n\t\tCount,\n\t\tSales_Team_fk = Team_fk,\n\t\tSales_Associate_fk = Employee_fk,\n\t\tTeamMember1_ID_nk,\n\t\tTeamMember2_ID_nk,\n\t\tEmployee_ID_nk,\n\t\tSourceSystem_fk,\n\t\tETLBatchID_Insert,\n\t\tETLBatchID_Update\n\t)) ~> SinkFactSalesTeamBridge"
		}
	}
}